[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Local Ecosystem accounts - a technical guidebook",
    "section": "",
    "text": "Introduction\nThis technical guidebook is here to assist project managers and data scientists at NINA in following a standardized and efficient method for data collection, analysis, publishing, and documentation in local-scale ecosystem accounting projects.\nThe guidebook covers the following topics:\nThis guidebook is a living document and will be updated as new methods and best practices are developed. If you have any suggestions for improvements or additions, please contact the authors or submit a pull request on the GitHub repository.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "data-management/data-management-plan.html",
    "href": "data-management/data-management-plan.html",
    "title": "Data Management Plan",
    "section": "",
    "text": "budget for data management and data publishing\ninvolve Miljødata from step 1 (project application)",
    "crumbs": [
      "Data management",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Management Plan</span>"
    ]
  },
  {
    "objectID": "data-management/data-publishing.html",
    "href": "data-management/data-publishing.html",
    "title": "Publish Map Data",
    "section": "",
    "text": "Step-by-step guide for submitting data",
    "crumbs": [
      "Data management",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Publish Map Data</span>"
    ]
  },
  {
    "objectID": "data-management/data-publishing.html#step-by-step-guide-for-submitting-data",
    "href": "data-management/data-publishing.html#step-by-step-guide-for-submitting-data",
    "title": "Publish Map Data",
    "section": "",
    "text": "Organize your data\n\n\nCreate a folder nina_map_catalog within your project folder (P:/)\nGroup your data into Ecosystem Accounting Framework groups: services, extent, condition, misc.\nRaster data:\n\nsave each raster as a single-band GeoTIFF into the nina_map_catalog folder.\nuse underscore as spaces (air_pollution_0301.tif)\n\nVector data:\n\nsave all vector layers of one group into one GeoPackage and save it in the nina_map_catalog folder.\n%project_name%_service.gpkg\n%project_name%_extent.gpkg\n%project_name%_condition.gpkg\n%project_name%_misc.gpkg\n\n\n\nFill out the import schema\n\nDownload import schema\nA filled out example can be found here.\nEnsure to read the README-sheet and fill out all required (*) fields.\nImportant: Check the data source of each data layer. If the data source is not owned by NINA, provide the WMS link to the original source and the link of where users can download this data (for example GeoNorge). In other words, we do not add AR5 data into the gpkg’s! Instead we show the map as a WMS layer and point the users to NIBIO for downloading the data.\n\nLayer styling\n\nIn your prefrerred GIS-software create a style for each layer.\nNote: we try to make the styling as similar as possible, but know that the MapLibre library we use is not as advanced as for example ArcGIS Pro. So customized colormaps might look slightly different in the NINA Maps Portal.\n\nRequest for publishing a new project within the EA NINA map portal\n\nSend the following information to Miljødata:\n\nthe filled out import-schema\nthe path to your cleaned and organized data: P:/…/nina_map_catalog\na qgis file, a arcgispro layer file, an agol app, an R or python file that displays your preferred styling of the map layers.\n\n\n\n\nExample structure of nina_map_catalog folder:\nP:/.../nina_map_catalog\n├── NINA_naturregnskap_metadata_importskjema_PROSJEKTNAVN.xlsx    (import schema)\n├── *%project_name%*_layer_styling.qgz                            (qgis project with preferred styling)\n├── *%project_name%*_condition.gpkg                               (vector layers grouped by EA framework)  \n├── *%project_name%*_extent.gpkg\n├── *%project_name%*_misc.gpkg\n|    ├── study_area\n|    └── vector_layer\n├── *%project_name%*_service.gpkg\n├── air_pollution_0301.tif                                        (single band raster layers)\n└── raster_layer.tif",
    "crumbs": [
      "Data management",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Publish Map Data</span>"
    ]
  },
  {
    "objectID": "data-management/data-publishing.html#guide-for-developers",
    "href": "data-management/data-publishing.html#guide-for-developers",
    "title": "Publish Map Data",
    "section": "Guide for developers",
    "text": "Guide for developers\nDevelopers:\n\nNiccolò Cantù\nFrancesco Frassinelli\n\nDocumentation: https://ninanor.github.io/nina-catalogue\nNINA’s catalogue consists of a Map Catalogue for viewing and dowloading maps and a Metadata Catalogue for accessing metadata. For the Local Ecosystem Accounts dataset (Finskala Naturregnskap) the maps are uploaded into the Map Catalogue, in the future these maps can also be uploaded in the Metadata Catalogue.\nBelow follows a short guide for setting up a local installation of the Catalogue on your machine. For detailed information and questions consult the documentation or the developers.\n### Installation instructions\nPrerequisites: - Linux OS - Docker\nGitHub repositories: - nina-catalogue -",
    "crumbs": [
      "Data management",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Publish Map Data</span>"
    ]
  },
  {
    "objectID": "data-management/naming-convention.html",
    "href": "data-management/naming-convention.html",
    "title": "Naming convention",
    "section": "",
    "text": "How to name variables etc.",
    "crumbs": [
      "Data management",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Naming convention</span>"
    ]
  },
  {
    "objectID": "field-surveys/field-surveys.html",
    "href": "field-surveys/field-surveys.html",
    "title": "Field surveys",
    "section": "",
    "text": "GIS tools\nblablabla",
    "crumbs": [
      "Field Surveys",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Field surveys</span>"
    ]
  },
  {
    "objectID": "field-surveys/field-surveys.html#gis-tools",
    "href": "field-surveys/field-surveys.html#gis-tools",
    "title": "Field surveys",
    "section": "",
    "text": "Flowcharts\nExample using html:\nNote that the classes are defined in the NINAstyle.scss\n\n\nStart\n\n\nProcess 1\n\n\nDecision\n\n\nProcess 2\n\n\nEnd\n\n\nExample using DiagrammerR:\n\n\nCode\ngraph &lt;- create_graph() %&gt;%\n  add_node(label=\"Node A\") %&gt;%\n  add_node(label = \" I have a\\nhyperlink\") %&gt;%\n  add_edge(from = 1, to = 2) %&gt;%\n  select_last_nodes_created() %&gt;%\n  set_node_attrs_ws(node_attr = URL, value = \"https://nrk.no\") %&gt;%\n  add_node(label = \"Looooooooooooooooooooong name\", from = 1, to = 2) %&gt;%\n  set_node_attrs(node_attr = shape, values =  \"box\") %&gt;%\n  select_nodes_by_id(nodes = 3) %&gt;%\n  set_node_attrs_ws(node_attr = shape, value = \"rectangle\")\n\n# Export the graph to a PNG file\nexport_graph(graph, file_name = \"graph.png\", width = 400, height = 400)\n\n# Include the PNG file in your HTML document\ninclude_graphics(\"graph.png\")\n\n\n\n\n\n\n\n\n\nExample using Mermaid:\nFor mermaid instructions see here.\n\n\n\n\n\nflowchart LR\n    A--&gt;B\n    B--&gt;C\n    B--&gt;D\n    C--&gt;D\n    click A callback \"Tooltip for a callback\"\n    click B \"https://www.github.com\" \"This is a tooltip for a link\"\n    click C call callback() \"Tooltip for a callback\"\n    click D href \"https://www.github.com\" \"This is a tooltip for a link\"",
    "crumbs": [
      "Field Surveys",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Field surveys</span>"
    ]
  },
  {
    "objectID": "remote-sensing/remote-sensing.html",
    "href": "remote-sensing/remote-sensing.html",
    "title": "Remote sensing",
    "section": "",
    "text": "Maybe we want to have a chapter in this?",
    "crumbs": [
      "Remote sensing",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Remote sensing</span>"
    ]
  },
  {
    "objectID": "appendix-notes.html",
    "href": "appendix-notes.html",
    "title": "Appendix A — Additional Notes",
    "section": "",
    "text": "Sample appendix",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Additional Notes</span>"
    ]
  },
  {
    "objectID": "appendix/appendix-notes.html",
    "href": "appendix/appendix-notes.html",
    "title": "Appendix A — Additional Notes",
    "section": "",
    "text": "Sample appendix",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Additional Notes</span>"
    ]
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "Local Ecosystem accounts - a technical guidebook",
    "section": "",
    "text": "Project Management: Guidance on planning and budgeting for data infrastructure in ecosystem accounting projects.\nData collection: Procedures for collecting data in ecosystem accounting projects.\n\nField Surveys: Instructions on conducting field surveys, including common methods and protocols.\nRemote Sensing: Techniques for utilizing remote sensing data in ecosystem accounting projects.\n\nData analysis: Best practices and methods for analyzing data in ecosystem accounting projects.\nData Publishing: Steps for publishing data in NINA’s map catalogue.\nDocumentation: Guidelines for documenting your project and data.\nFAIR Data Managment: How to adhere to FAIR principles in ecosystem accounting projects.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "project-management/project-management.html",
    "href": "project-management/project-management.html",
    "title": "Project Management",
    "section": "",
    "text": "Data Management Plan\nLicenses, tools, software\nbudget for data management and data publishing\ninvolve Miljødata from step 1 (project application)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Project Management</span>"
    ]
  },
  {
    "objectID": "data-publishing/data-publishing.html",
    "href": "data-publishing/data-publishing.html",
    "title": "Data Publishing",
    "section": "",
    "text": "Step-by-step guide for submitting data",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Data Publishing</span>"
    ]
  },
  {
    "objectID": "data-publishing/data-publishing.html#step-by-step-guide-for-submitting-data",
    "href": "data-publishing/data-publishing.html#step-by-step-guide-for-submitting-data",
    "title": "Data Publishing",
    "section": "",
    "text": "Organize your data\n\n\nCreate a folder nina_map_catalog within your project folder (P:/)\nGroup your data into Ecosystem Accounting Framework groups: services, extent, condition, misc.\nRaster data:\n\nsave each raster as a single-band GeoTIFF into the nina_map_catalog folder.\nuse underscore as spaces (air_pollution_0301.tif)\n\nVector data:\n\nsave all vector layers of one group into one GeoPackage and save it in the nina_map_catalog folder.\n%project_name%_service.gpkg\n%project_name%_extent.gpkg\n%project_name%_condition.gpkg\n%project_name%_misc.gpkg\n\n\n\nFill out the import schema\n\nDownload import schema\nA filled out example can be found here.\nEnsure to read the README-sheet and fill out all required (*) fields.\nImportant: Check the data source of each data layer. If the data source is not owned by NINA, provide the WMS link to the original source and the link of where users can download this data (for example GeoNorge). In other words, we do not add AR5 data into the gpkg’s! Instead we show the map as a WMS layer and point the users to NIBIO for downloading the data.\n\nLayer styling\n\nIn your prefrerred GIS-software create a style for each layer.\nNote: we try to make the styling as similar as possible, but know that the MapLibre library we use is not as advanced as for example ArcGIS Pro. So customized colormaps might look slightly different in the NINA Maps Portal.\n\nRequest for publishing a new project within the EA NINA map portal\n\nSend the following information to Miljødata:\n\nthe filled out import-schema\nthe path to your cleaned and organized data: P:/…/nina_map_catalog\na qgis file, a arcgispro layer file, an agol app, an R or python file that displays your preferred styling of the map layers.\n\n\n\n\nExample structure of nina_map_catalog folder:\nP:/.../nina_map_catalog\n├── NINA_naturregnskap_metadata_importskjema_PROSJEKTNAVN.xlsx    (import schema)\n├── *%project_name%*_layer_styling.qgz                            (qgis project with preferred styling)\n├── *%project_name%*_condition.gpkg                               (vector layers grouped by EA framework)  \n├── *%project_name%*_extent.gpkg\n├── *%project_name%*_misc.gpkg\n|    ├── study_area\n|    └── vector_layer\n├── *%project_name%*_service.gpkg\n├── air_pollution_0301.tif                                        (single band raster layers)\n└── raster_layer.tif",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Data Publishing</span>"
    ]
  },
  {
    "objectID": "data-publishing/data-publishing.html#guide-for-developers",
    "href": "data-publishing/data-publishing.html#guide-for-developers",
    "title": "Data Publishing",
    "section": "Guide for developers",
    "text": "Guide for developers\nDevelopers:\n\nNiccolò Cantù\nFrancesco Frassinelli\n\nDocumentation: https://ninanor.github.io/nina-catalogue\nNINA’s catalogue includes a Map Module for storing maps, accesible at maps.nina.no, and a Datasets Module for storing data and metadata, accesible via PyGeoAPI. For the Local Ecosystem Accounts dataset (Finskala Naturregnskap), maps are uploaded to the Map Catalogue. In the future, these maps may also be uploaded as a dataset thus be accesible via the PyGeoAPI.\nBelow is a brief guide for setting up a local installation of the Catalogue on your machine. For detailed information and inquiries, please refer to the documentation or contact the developers. This is meant for development and testing, the production environment is managed by Niccolò Cantù.\n\nInstallation instructions\nPrerequisites:\n\nLinux OS\nDocker\n\nGitHub repositories:\n\n\n\nRepository\nDescription\nTechnologies\n\n\n\n\nnina-catalogue\nBackend architecture\nDjango and PostgreSQL\n\n\nnina-map-explorer\nFrontend map application\nMapLibre with PM Tiles\n\n\nnaturregnskap_maps_uploader\nAPI, specifically designed for uploading map data and metadata to the Local Ecosystem Accounts dataset using the import schema.\nPython\n\n\n\nInstallation steps:\n\nInstall the backend architecture\n\nFollow the instructions in the README of the nina-catalogue\n\nCreate secrets in the secrets folder\ncd setup\ndocker compose up --build\nstart all services in dev mode\n# source the helper functions\n. helpers.sh\n\n# alias in helpers.sh\n# run the docker-compose file in the dev profile\n# env variables are loaded from secrets \ndpcli_dev up --build\ncreate an admin user\ndjcli_dev migrate\ndjcli_dev createsuperuser\nSet the admin email and password, and remember them to later login to the Django admin: localhost:8000/admin/\nstart the Django admin interface\nxdg-open http://localhost:8000/admin\ngenerate a token for your user in Django admin GUI: Tokens -&gt; Add token\n\n\n\n\n\n\n\nDjango Admin GUI\n\n\n\nInstall the frontend map application\n\nFollow the instructions in the README of the nina-map-explorer\n\nstart the web service in prod mode\n# Start all services defined in the docker-compose.yml\n# -d run in detached mode (background)\ndocker compose --profile prod up\nstart the web app\nxdg-open http://localhost:3000\n\n\n\n\nErrors in the web application can be inspected in the browser console using: right-click -&gt; inspect -&gt; console or ctrl+shift+j.\n\n\nInstall the Naturregnskap API\n\nFollow the instructions in the README of the naturregnskap_maps_uploader\n\nInstall the Python environment\n\npython3 -m venv .venv\nsource .venv/bin/activate\n\npip install -e .\n\ntouch .env\n\nConfigure the API with the Django backend\n\nCopy the token generated in Django admin (step 1)\nAdd the token to the .env file\n\nAUTH_TOKEN=my_token\nDEBUG=True\n\n\n\nNow you have a local installation of the NINA Catalogue and the following services are available:\n\n\n\nService\nURL\n\n\n\n\nMetadata catalogue\nlocalhost:8000\n\n\nDjango admin\nlocalhost:8000/admin/\n\n\nMap application\nlocalhost:3000\n\n\nDocumentation\nlocalhost:3001",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Data Publishing</span>"
    ]
  },
  {
    "objectID": "data-publishing/naming-convention.html",
    "href": "data-publishing/naming-convention.html",
    "title": "Naming convention",
    "section": "",
    "text": "How to name variables etc.\n\nMove to FAIR data chapter",
    "crumbs": [
      "Data Publishing",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Naming convention</span>"
    ]
  },
  {
    "objectID": "data-collection/field-surveys/field-surveys.html",
    "href": "data-collection/field-surveys/field-surveys.html",
    "title": "Field surveys",
    "section": "",
    "text": "GIS tools\nblablabla",
    "crumbs": [
      "Data Collection",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Field surveys</span>"
    ]
  },
  {
    "objectID": "data-collection/field-surveys/field-surveys.html#gis-tools",
    "href": "data-collection/field-surveys/field-surveys.html#gis-tools",
    "title": "Field surveys",
    "section": "",
    "text": "Flowcharts\nExample using html:\nNote that the classes are defined in the NINAstyle.scss\n\n\nStart\n\n\nProcess 1\n\n\nDecision\n\n\nProcess 2\n\n\nEnd\n\n\nExample using DiagrammerR:\n\n\nCode\ngraph &lt;- create_graph() %&gt;%\n  add_node(label=\"Node A\") %&gt;%\n  add_node(label = \" I have a\\nhyperlink\") %&gt;%\n  add_edge(from = 1, to = 2) %&gt;%\n  select_last_nodes_created() %&gt;%\n  set_node_attrs_ws(node_attr = URL, value = \"https://nrk.no\") %&gt;%\n  add_node(label = \"Looooooooooooooooooooong name\", from = 1, to = 2) %&gt;%\n  set_node_attrs(node_attr = shape, values =  \"box\") %&gt;%\n  select_nodes_by_id(nodes = 3) %&gt;%\n  set_node_attrs_ws(node_attr = shape, value = \"rectangle\")\n\n# Export the graph to a PNG file\nexport_graph(graph, file_name = \"graph.png\", width = 400, height = 400)\n\n# Include the PNG file in your HTML document\ninclude_graphics(\"graph.png\")\n\n\n\n\n\n\n\n\n\nExample using Mermaid:\nFor mermaid instructions see here.\n\n\n\n\n\nflowchart LR\n    A--&gt;B\n    B--&gt;C\n    B--&gt;D\n    C--&gt;D\n    click A callback \"Tooltip for a callback\"\n    click B \"https://www.github.com\" \"This is a tooltip for a link\"\n    click C call callback() \"Tooltip for a callback\"\n    click D href \"https://www.github.com\" \"This is a tooltip for a link\"",
    "crumbs": [
      "Data Collection",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Field surveys</span>"
    ]
  },
  {
    "objectID": "data-collection/remote-sensing/remote-sensing.html",
    "href": "data-collection/remote-sensing/remote-sensing.html",
    "title": "Remote sensing",
    "section": "",
    "text": "Maybe we want to have a chapter in this?",
    "crumbs": [
      "Data Collection",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Remote sensing</span>"
    ]
  },
  {
    "objectID": "data-analysis/data-analysis.html",
    "href": "data-analysis/data-analysis.html",
    "title": "Data analysis",
    "section": "",
    "text": "comparison of methods\nrefer to previous project methods\nbest practices",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Data analysis</span>"
    ]
  },
  {
    "objectID": "fair-data/naming-convention.html",
    "href": "fair-data/naming-convention.html",
    "title": "Naming Convention",
    "section": "",
    "text": "How to name variables etc.",
    "crumbs": [
      "FAIR Data Management",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Naming Convention</span>"
    ]
  },
  {
    "objectID": "data-publishing/data-publishing.html#how-to-create-a-map-and-upload-data-to-the-nina-catalogue",
    "href": "data-publishing/data-publishing.html#how-to-create-a-map-and-upload-data-to-the-nina-catalogue",
    "title": "Data Publishing",
    "section": "How to create a map and upload data to the NINA Catalogue",
    "text": "How to create a map and upload data to the NINA Catalogue\nBelow are the steps to create a map for the Local Ecosystem Accounts dataset and upload the data to the NINA Catalogue from scratch. You only need to create a map once, and then you can upload data to the same map multiple times using the API.\n\nDjango admin - Create a Map\n\nDjango admin -&gt; Maps -&gt; Add map\nFill out the form and save. An error will be shown if the form is not filled out correctly.\nThe field Extras can be used to directly pass a JSON object to the MapLibre Frontend. For example, to set the initial map view, you can pass the following JSON object: {\"center\": [10.7, 59.9]}.\n\nDjango admin - Add background layer to the map.\n\nadd raster source\n\nMaps &gt; Raster sources\nSet tile-URL, zoom and size in extras:\n\n{\n\"tiles\": [\"https://a.basemaps.cartocdn.com/light_nolabels/{z}/{x}/{y}{r}.png\"], \n\"maxZoom\": 20, \n\"tileSize\": 256\n}\nadd source to the Map as Layer\n\nMaps &gt; Layers &gt; Add layer\nSet style: {\"type\": \"raster\"}\ncheck basemap box\n\n\nPrepare your data\n\nPrepare the raster data\n\nadd the metadata to your geotiff\nconvert GEOTiff to a Cloud Optimized GEOTIFF (COG) using generate_cog.sh\ndefine raster style and legend in style.json\n\nPrepare the vector data\n\nconvert the GeoPackages to PMTiles using GDAL &gt;= 3.8.\n\n\nsource scripts/generate_pmtiles.h\n\n\n```bash\ndocker run --rm -ti -v $PWD:/host --workdir /host ghcr.io/osgeo/gdal \\\n    ogr2ogr -skipfailures -f PMTiles converted.pmtiles original.gpkg -dsco MAXZOOM=15\n\ndefine the vector style and legend in style.json\ndocs: gdal.org/drivers/vector/pmtiles.html.\n\nNaturregnskaps API - Upload map layers and metadata\n\nCheck the import schema (provided by the projects data manager)\nCheck the style file\nUpload the data and metadata using the API\ncommand: naturregnskap_maps_uploader_start http://server:port map_slug --wd /path/to/data/\nexample: naturregnskap_maps_uploader_start http://localhost:8000 localEA --wd ~/temp/nina-map-catalog\nThe API will read the import schema and upload the data to the NINA Catalogue.\n\n\n\nGDAL is needed to convert rasters to COG and vectors to PMTiles. Here is an example of how to execute a GDAL command inside a container.\n#!/bin/bash exec docker run –rm –pid=host -v /tmp/.X11-unix:/tmp/.X11-unix:ro -e DISPLAY=\\(DISPLAY     -v \"\\)PWD”:/host –workdir /host -v /tmp:/tmp –entrypoint=“” “osgeo/gdal:alpine-small-3.6.2” “gdal_translate” “$@”",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Data Publishing</span>"
    ]
  }
]